
package analogsection;



import java.awt.LayoutManager;
import java.util.ArrayList;
import javax.swing.ImageIcon;


/**
 *
 * @author Stephen 
 */


public class InformationGUIAllSections extends javax.swing.JPanel {

    /**
     * Creates new form HangmanGUIPanel
     */
    
    // variables
    Information analogInfo;
    Information digitalInfo;
    Information plasticInfo;
    Information woodInfo;
    Information analogComp;
    Information analogSignals;
    Information analogDiag;
    Information digitalComp;
    Information digitalDiag;
    private String infoDisplayed;
    private int count,imgSelector,imgSelectorDigital,imgSelectorPlastic,imgSelectorWood,imgSelectorAnaComp,imgSelectorAnaSignals,imgSelectorDiagTools ,imgSelectorDigit,i ;
    protected static int infoSelected;
    private ArrayList <String> info;
  //  private Image displayedImg;
    private ImageIcon ImgDisplayedLbl;
    public InformationGUIAllSections() {
        initComponents();
        this.setSize(400,450);
        imageChangeLbl.setVisible(false);
        analogInfo = new Information();
        digitalInfo = new Information();
        plasticInfo = new Information();
        woodInfo = new Information();
        analogComp = new Information();
        analogDiag = new Information();
        analogSignals = new Information(); 
        digitalComp = new Information(); 
        digitalDiag = new Information(); 
        infoDisplayed = "";
        count = 0;
        imgSelector = 0;
        infoLbl.setText("");
        imgSelectorDigital = 10;
        imgSelectorPlastic = 21;
        imgSelectorWood = 32;
        imgSelectorAnaComp = 43;
        imgSelectorAnaSignals = 54;
        imgSelectorDiagTools = 65;
        imgSelectorDigit = 76;
        digitalComp = new Information();
        
        
    
        
        
        
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        detailsLbl = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        imageChangeLbl = new javax.swing.JLabel();
        infoLbl = new javax.swing.JLabel();
        backgroundLbl = new javax.swing.JLabel();

        setLayout(null);

        detailsLbl.setBackground(new java.awt.Color(255, 255, 255));
        detailsLbl.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        detailsLbl.setForeground(new java.awt.Color(51, 153, 255));
        detailsLbl.setText("Details:");
        add(detailsLbl);
        detailsLbl.setBounds(10, 190, 110, 30);

        exitBtn.setBackground(new java.awt.Color(0, 153, 255));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        add(exitBtn);
        exitBtn.setBounds(240, 410, 150, 40);

        titleLbl.setFont(new java.awt.Font("Apple Chancery", 1, 18)); // NOI18N
        titleLbl.setText("Information");
        add(titleLbl);
        titleLbl.setBounds(140, 0, 150, 40);

        backBtn .setOpaque(false);
        backBtn .setContentAreaFilled(false);
        backBtn.setBorderPainted(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn);
        backBtn.setBounds(0, -1, 70, 40);

        nextBtn.setOpaque(false);
        nextBtn.setContentAreaFilled(false);
        nextBtn.setBorderPainted(false);
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        add(nextBtn);
        nextBtn.setBounds(310, 0, 90, 40);
        add(imageChangeLbl);
        imageChangeLbl.setBounds(90, 50, 280, 140);
        add(infoLbl);
        infoLbl.setBounds(10, 216, 380, 190);

        backgroundLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analogsection/InformationGUI.png"))); // NOI18N
        add(backgroundLbl);
        backgroundLbl.setBounds(-2, 0, 400, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
//        * A series of if statements checking which panel to go back to,
//        * The imgSelector variable will determine which
//        * Screen to terevers back to.
        
        //Resets the image holder label to have no imageIco when reset
        imageChangeLbl.setIcon(null);
        
        //resets the info labl to have no text when the GUI is exited 
        infoLbl.setText("");
        
         //resets the info slide counter to 0
         count = 0;
         // resets each of yhe sections counters
         analogInfo.setCount(count);
         digitalInfo.setCount(count);
         plasticInfo.setCount(count);
         woodInfo.setCount(count);
         analogComp.setCount(count);
         analogSignals.setCount(count);
         analogDiag.setCount(count);
        
        if (Information.getInfoType() == 1) {
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof java.awt.CardLayout) {
                java.awt.CardLayout cl = (java.awt.CardLayout) layout;
                cl.show(getParent(), "AnalogInfoMainScreen");
            }
        }//end of condition
        else if (Information.getInfoType() == 2) {
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof java.awt.CardLayout) {
                java.awt.CardLayout cl = (java.awt.CardLayout) layout;
                cl.show(getParent(), "DigitalSectionGUI");
            }
        }
        else if(Information.getInfoType() == 3){
          LayoutManager layout = getParent().getLayout();
          if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "PlasticMainGUI");
           }
      }else if(Information.getInfoType() == 4){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "WoodMainPanel");
           }
      }else if(Information.getInfoType() == 5){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogInfoMainScreen");
           }
      }else if(Information.getInfoType() == 6){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogInfoMainScreen");
           }
      }else if(Information.getInfoType() == 7){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogMainScreen");
        }
      }else if(Information.getInfoType() == 8){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "digital");
        }
      }else if(Information.getInfoType() == 9){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogMainScreen");
        }
      }
        
       
    }//GEN-LAST:event_exitBtnActionPerformed
 
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed

        //sets the lbl which stores the image to be seen when the button is pressed     
        imageChangeLbl.setVisible(true);
        
        //retrives an static value which is sent from the different GUI's when information is selected,
        // The value is then used to determine which section's information is to be diplayed to the user.
        infoSelected = Information.getInfoType();
        //error check 
        System.out.println(infoSelected);
        if (infoSelected == 1) {
            // * anonymous inner class, to populate the info array.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed 
            // * Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            
            // The html tag is used to wrapp the text in so that, 
            // they automatically wrap to the space available 
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("<html> Ohmz law, is the relationship between Voltage, Current and Resistance in any DC circuit, which was discovered by German Georg ohm. <html>");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used direct the flow of current");
                }
            };


            analogInfo.setInfo(info);

            if (count < 10 && imgSelector < 10) {
                analogInfo.setImageUsed(imgSelector);
                analogInfo.setUrls();
                ImgDisplayedLbl = analogInfo.AddImageUsingURLS();
                imgSelector++;
                
                analogInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 2) {
             
            // anonymous inner class, to populate the info array
            // The html tag is used to wrapp the text in so that, 
            // they automatically wrap to the space available 
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("<html> A capacitor stores and releases charge gngngngngngn </html>");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are used to restrict the flow of current");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used direct the flow of current");
                }
            };
            //sets the info array
            digitalInfo.setInfo(info);
           
            //checks to see if the info selector, and imag selector are less then 10, 
            // to avoid them becoming out of bounds.
            if (count < 10 && imgSelector < 10) {
                digitalInfo.setImageUsed(imgSelector);
                digitalInfo.setUrls();
                ImgDisplayedLbl = digitalInfo.AddImageUsingURLS();
                imgSelectorDigital++;
                digitalInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 3) {
            /*
               * Plastic part goes here.
               * Info to popluate the array , and also be sent to the information class for processing,
               * for the section goes below.
               * Also make sure that the image's which correspond to your section are in the, src/Resoures folder,
               * also make sure that they correspond to the imgSelector value which your section is asinged,
               * i.e. each section is given 10 images, so platicImgSlector starts at 21 which is the first img, and 21 + 10 is the last image.
            */
            ArrayList<String> info = new ArrayList<String>() {
                {   
                    add("Most plastics are made from crude oil");
                    add("Plastics are a man-made, waterproof material.");
                    add("There are 2 types of plastics, Thermosetting and Thermoplastics");
                    add("Thermoplastics can be moulded and shaped in various ways");
                    add("Thermosetting plastics are strong and resistant to heat");
                    add("Thermosetting plastics cannot be reshaped");
                    add("Thermosetting plastics are used in situations where resistant to heat is important");
                    add("PvC, Acrylic, Polyethylene and Polypropylene are examples of Thermoplastics.");
                    add("Polyester Resin, Melamine Formaldehyde and phenol Formaldehyde are examples of Thermosetting plastics.");
                    add("Plastic takes a very long time to decompose");
                }
            };
            //sends the info to the information class
            plasticInfo.setInfo(info);
            if (count < 10 && imgSelectorPlastic < 32) {
                plasticInfo.setImageUsed(imgSelectorPlastic);
                plasticInfo.setUrls();
                ImgDisplayedLbl = plasticInfo.AddImageUsingURLS();
                imgSelectorPlastic++;
                plasticInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = plasticInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 4) {
            /*
               * Wood section goes here.
               * Info to popluate the array , and also be sent to the information class for processing,
               * for the section goes below.
               * Also make sure that the image's which correspond to your section are in the, src/Resoures folder,
               * also make sure that they correspond to the imgSelector value which your section is asinged,
               * i.e. each section is given 10 images, so platicImgSlector starts at 32 which is the first img, and 32 + 10 is the last image.
            */
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("W");
                    add("O");
                    add("O");
                    add("D");
                    add("G");
                    add("o");
                    add("E");
                    add("s");
                    add("here");
                    add(":)");
                }
            };
            woodInfo.setInfo(info);
            if (count < 10 && imgSelectorWood < 43) {
                woodInfo.setImageUsed(imgSelectorWood);
                woodInfo.setUrls();
                ImgDisplayedLbl = woodInfo.AddImageUsingURLS();
                imgSelectorWood++;
                //Information.setCount(count = 0);
                woodInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = woodInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);
            }
        } else if (infoSelected == 5) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };
            
            analogComp.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                analogComp.setImageUsed(imgSelectorAnaComp);
                analogComp.setUrls();
                ImgDisplayedLbl = analogComp.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                analogComp.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogComp.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 6) { 
            // anonymous inner class, to set the info
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

            analogSignals.setInfo(info);
            if(count < 10 && imgSelectorAnaSignals < 65) {
                analogSignals.setImageUsed(imgSelectorAnaSignals);
                analogSignals.setUrls();
                ImgDisplayedLbl = analogSignals.AddImageUsingURLS();
                imgSelectorAnaSignals++;
                //Information.setCount(count = 0);
                analogSignals.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogSignals.DisplayInfo();
                infoLbl.setText(infoDisplayed);

                // break;
            }

        }//end of slector if
         else if (infoSelected == 7) {
            // anonymous inner class, to set the info
            ArrayList<String> info = new ArrayList<String>() {
                {
                   add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

            analogDiag.setInfo(info);
            
            //not working 
            if (count < 10 && imgSelectorDiagTools  < 74) {
                analogDiag.setImageUsed(imgSelectorDiagTools);
                analogDiag.setUrls();
                ImgDisplayedLbl = analogDiag.AddImageUsingURLS();
                imgSelectorDiagTools++;
                //Information.setCount(count = 0);
                analogDiag.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogDiag.DisplayInfo();
                infoLbl.setText(infoDisplayed);

                // break;
            }

        }//end of slector if
         else if (infoSelected == 8) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                   add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

             digitalComp.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                digitalComp.setImageUsed(imgSelectorAnaComp);
                digitalComp.setUrls();
                ImgDisplayedLbl = digitalComp.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                digitalComp.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalComp.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 9) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };


            digitalDiag.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                digitalDiag.setImageUsed(imgSelectorAnaComp);
                digitalDiag.setUrls();
                ImgDisplayedLbl = digitalDiag.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                digitalDiag.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalDiag.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        }else{
            System.out.println("Error occoured, invaild option");
        }
            
        System.out.println("index:" + count + "Message:" + infoDisplayed);
    }//GEN-LAST:event_nextBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        //Checks to see which type of section info has been selected, and
        //terverse's backwards through the images, and info text which has been displayed.
        //Uses's a series of if statments, to only terverse backwards if the counter, is greater than,
        // or equal to the last img, and info text. this is to keep the selector from being out of bounds of the arrays 
        if (infoSelected == 1) {
            if (count > 0 && imgSelector > 0) {
                count--;
                imgSelector--;
                analogInfo.setCount(count);
                analogInfo.setImageUsed(imgSelector);
                analogInfo.setUrls();
                infoDisplayed = analogInfo.DisplayInfo();
                ImgDisplayedLbl = analogInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
          
        } else if (infoSelected == 2) {
            if (count > 0 && imgSelectorDigital > 9) {
                count--;
                imgSelectorDigital--;
                digitalInfo.setCount(count);
                digitalInfo.setImageUsed(imgSelectorDigital);
                digitalInfo.setUrls();
                infoDisplayed = digitalInfo.DisplayInfo();
                ImgDisplayedLbl = digitalInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        }//end of else if 
        else if (infoSelected == 3) {
            if (count > 0 && imgSelectorPlastic > 20) {
                count--;
                imgSelectorPlastic--;
                plasticInfo.setCount(count);
                plasticInfo.setImageUsed(imgSelectorPlastic);
                plasticInfo.setUrls();
                infoDisplayed = plasticInfo.DisplayInfo();
                ImgDisplayedLbl = plasticInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        } else if (infoSelected == 4) {
            if (count > 0 && imgSelectorWood > 33) {
                count--;
                imgSelectorWood--;
                woodInfo.setCount(count);
                woodInfo.setImageUsed(imgSelectorWood);
                woodInfo.setUrls();
                infoDisplayed = woodInfo.DisplayInfo();
                ImgDisplayedLbl = woodInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        } else if (infoSelected == 5) {
            if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                analogComp.setCount(count);
                analogComp.setImageUsed(imgSelectorAnaComp);
                analogComp.setUrls();
                infoDisplayed = analogComp.DisplayInfo();
                ImgDisplayedLbl = analogComp.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else if (infoSelected == 6) {
            if (count > 0 && imgSelectorAnaSignals > 54) {
                count--;
                imgSelectorAnaSignals--;
                analogSignals.setCount(count);
                analogSignals.setImageUsed(imgSelectorAnaSignals);
                analogSignals.setUrls();
                infoDisplayed = analogSignals.DisplayInfo();
                ImgDisplayedLbl = analogSignals.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
           }else if (infoSelected == 7) {
            if (count > 0 && imgSelectorDiagTools > 65) {
                count--;
                imgSelectorDiagTools--;
                analogDiag.setCount(count);
                analogDiag.setImageUsed(imgSelectorDiagTools);
                analogDiag.setUrls();
                infoDisplayed = analogDiag.DisplayInfo();
                ImgDisplayedLbl = analogDiag.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
           }else if (infoSelected == 8) {
            if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                digitalComp.setCount(count);
                digitalComp.setImageUsed(imgSelectorAnaComp);
                digitalComp.setUrls();
                infoDisplayed = digitalComp.DisplayInfo();
                ImgDisplayedLbl = digitalComp.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else if (infoSelected == 9) {
           if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                digitalDiag.setCount(count);
                digitalDiag.setImageUsed(imgSelectorAnaComp);
                digitalDiag.setUrls();
                infoDisplayed = digitalDiag.DisplayInfo();
                ImgDisplayedLbl = digitalDiag.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else{
                 System.out.print("An error occourd");
                }
        
         
            
        
        
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel backgroundLbl;
    private javax.swing.JLabel detailsLbl;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel imageChangeLbl;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
}
