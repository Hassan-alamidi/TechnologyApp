/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analogsection;



import java.awt.LayoutManager;
import java.util.ArrayList;
import javax.swing.ImageIcon;


/**
 *
 * @author Stephen 
 */


public class InformationGUIAllSections extends javax.swing.JPanel {

    /**
     * Creates new form HangmanGUIPanel
     */
    
    // variables
    Information analogInfo;
    Information digitalInfo;
    Information plasticInfo;
    Information woodInfo;
    Information analogComp;
    Information analogSignals;
    Information analogDiag;
    Information digitalComp;
    Information digitalDiag;
    private String infoDisplayed;
    private int count,imgSelector,imgSelectorDigital,imgSelectorPlastic,imgSelectorWood,imgSelectorAnaComp,imgSelectorAnaSignals,imgSelectorDiagTools ,imgSelectorDigit,i ;
    protected static int infoSelected;
    private ArrayList <String> info;
  //  private Image displayedImg;
    private ImageIcon ImgDisplayedLbl;
    public InformationGUIAllSections() {
        initComponents();
        this.setSize(400,450);
        imageChangeLbl.setVisible(false);
        analogInfo = new Information();
        digitalInfo = new Information();
        plasticInfo = new Information();
        woodInfo = new Information();
        analogComp = new Information();
        analogDiag = new Information();
        analogSignals = new Information(); 
        digitalComp = new Information(); 
        digitalDiag = new Information(); 
        infoDisplayed = "";
        count = 0;
        imgSelector = 0;
        infoLbl.setText("");
        imgSelectorDigital = 10;
        imgSelectorPlastic = 21;
        imgSelectorWood = 32;
        imgSelectorAnaComp = 43;
        imgSelectorAnaSignals = 54;
        imgSelectorDiagTools = 65;
        imgSelectorDigit = 76;
        digitalComp = new Information();
        
        
    
        
        
        
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        detailsLbl = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        imageChangeLbl = new javax.swing.JLabel();
        infoLbl = new javax.swing.JLabel();
        backgroundLbl = new javax.swing.JLabel();

        setLayout(null);

        detailsLbl.setBackground(new java.awt.Color(255, 255, 255));
        detailsLbl.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        detailsLbl.setForeground(new java.awt.Color(51, 153, 255));
        detailsLbl.setText("Details:");
        add(detailsLbl);
        detailsLbl.setBounds(10, 190, 110, 30);

        exitBtn.setBackground(new java.awt.Color(0, 153, 255));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        add(exitBtn);
        exitBtn.setBounds(220, 390, 150, 40);

        titleLbl.setFont(new java.awt.Font("Apple Chancery", 1, 18)); // NOI18N
        titleLbl.setText("Information");
        add(titleLbl);
        titleLbl.setBounds(140, 0, 150, 40);

        backBtn .setOpaque(false);
        backBtn .setContentAreaFilled(false);
        backBtn.setBorderPainted(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn);
        backBtn.setBounds(0, -1, 70, 40);

        nextBtn.setOpaque(false);
        nextBtn.setContentAreaFilled(false);
        nextBtn.setBorderPainted(false);
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        add(nextBtn);
        nextBtn.setBounds(310, 0, 90, 40);
        add(imageChangeLbl);
        imageChangeLbl.setBounds(90, 50, 280, 140);
        add(infoLbl);
        infoLbl.setBounds(10, 226, 380, 160);

        backgroundLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analogsection/InformationGUI.png"))); // NOI18N
        add(backgroundLbl);
        backgroundLbl.setBounds(-2, 0, 400, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
//        * A series of if statements checking which panel to go back to,
//        * The imgSelector variable will determine which
//        * Screen to terevers back to.
        
        //Resets the image holder label to have no imageIco when reset
        imageChangeLbl.setIcon(null);
        
        //resets the text to nothing when the information is exited
        infoLbl.setText("");
        
         //resets the info slide counter to 0
         count = 0;
         // resets each of yhe sections counters
         analogInfo.setCount(count);
         digitalInfo.setCount(count);
         plasticInfo.setCount(count);
         woodInfo.setCount(count);
         analogComp.setCount(count);
         analogSignals.setCount(count);
         analogDiag.setCount(count);
        
        if (Information.getInfoType() == 1) {
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof java.awt.CardLayout) {
                java.awt.CardLayout cl = (java.awt.CardLayout) layout;
                cl.show(getParent(), "AnalogInfoMainScreen");
            }
        }//end of condition
        else if (Information.getInfoType() == 2) {
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof java.awt.CardLayout) {
                java.awt.CardLayout cl = (java.awt.CardLayout) layout;
                cl.show(getParent(), "DigitalSectionGUI");
            }
        }
        else if(Information.getInfoType() == 3){
          LayoutManager layout = getParent().getLayout();
          if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "PlasticMainGUI");
           }
      }else if(Information.getInfoType() == 4){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "WoodMainPanel");
           }
      }else if(Information.getInfoType() == 5){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogInfoMainScreen");
           }
      }else if(Information.getInfoType() == 6){
            LayoutManager layout = getParent().getLayout();
         if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogInfoMainScreen");
           }
      }else if(Information.getInfoType() == 7){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogMainScreen");
        }
      }else if(Information.getInfoType() == 8){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "digital");
        }
      }else if(Information.getInfoType() == 9){
           LayoutManager layout = getParent().getLayout();
        if (layout instanceof java.awt.CardLayout) {
            java.awt.CardLayout cl = (java.awt.CardLayout)layout;
            cl.show(getParent(), "AnalogMainScreen");
        }
      }
        
       
    }//GEN-LAST:event_exitBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed

     
        imageChangeLbl.setVisible(true);
        infoSelected = Information.getInfoType();
        //error check 
        System.out.println(infoSelected);
        if (infoSelected == 1) {
            // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // * Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used direct the flow of current");
                }
            };


            analogInfo.setInfo(info);

            if (count < 10 && imgSelector < 10) {
                //imgSelector = 0;
                analogInfo.setImageUsed(imgSelector);
                analogInfo.setUrls();
                ImgDisplayedLbl = analogInfo.AddImageUsingURLS();
                imgSelector++;
                //Information.setCount(count = 0);
                analogInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 2) {
              //Sets the infomation 
            // anonymous inner class, to set the info
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("<html>In electronics their are two types of electrical current<br> A.C which stands for alternating current and <br>D.C which stands for direct current. </html>");
                    add("<html>Digital is a type of signal similar to analog but unlike analog<br> the sginal is not measured in continuous signal which represents<br> physical measurements but rather digital signals are<br> discrete time signals generated by digital modulation basicaly boolian values or on and off signals.<br>Digital electronics have many different applications the most common application today would be computers.</html>");
                    add("<html>In an electronical circuit electricty(electrons) must flow through it in order for the circuit to work.<br> The direction of the current is important it was first believed that electrons flowed from the positive termanal to the negitive which is called conventional current but has now been proven wrong as electrons actually flow from the negitive to positive this is called real current(Electron Flow). In 99% of cases this is not important as electronic components are set up to be used with conventinal current but some industres do take real current into account.</html>");
                    add("<html>breadbords are used for<br> creating and testing circuit ideas</html>");
                    add("<html>When building or inspecting a circuit you must know how much voltage, resitance and current is going to flow through the circuit. when planning/inspecting a circuit and the circuits components you can use Ohms law to calculate these values.</html>");
                    add("<html>Ohms law is a basic mathimatical guide line for getting values in a circuit you may not already know these values include power(P),Resistance(R),Voltage(V) and current(I). </html>");
                    add("<html>these calculations are basically <br>(remember V=voltage, R=Resistance, I=Current, P=Power)<br>I=V/R,    I=P/V,    I=√P/R<br>,V=I*R,    V=P/I,    V=√P*R<br>,R=V/I,     R=V²/P,     R=P/I²<br>,P=V*I,     P=I²*R,     P=V²/R</html>");
                    add("<html>Resistors are used to restrict the flow of current <br>in a given circuit this resistance is measured in Ohms</html>");
                    add("<html>An analog to digital converter<br> recieves an analog signal and converts it to digital format</html>");
                    add("<html>Diode is used direct the flow of current.<br> There are many types of diodes that are more suitable in<br> different situations the most commently known diode would be the<br> LED(Light emmiting Diode) which not only directs the flow of current<br> but in most cases emits a visible light unless the led is<br> infrared then the light my not be seen by the human eye.</html>");
                }
            };

            digitalInfo.setInfo(info);
           
            if (count < 10 && imgSelector < 10) {
                digitalInfo.setImageUsed(imgSelector);
                digitalInfo.setUrls();
                ImgDisplayedLbl = digitalInfo.AddImageUsingURLS();
                imgSelectorDigital++;
                //Information.setCount(count = 0);
                digitalInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

                // break;
            }

        } else if (infoSelected == 3) {
            //plastic part
            //set info here 
            ArrayList<String> info = new ArrayList<String>() {
                {   
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

            plasticInfo.setInfo(info);
            if (count < 10 && imgSelector < 32) {
                plasticInfo.setImageUsed(imgSelector);
                plasticInfo.setUrls();
                ImgDisplayedLbl = plasticInfo.AddImageUsingURLS();
                imgSelectorPlastic++;
                //Information.setCount(count = 0);
                plasticInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = plasticInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 4) {
            //wood part
            //add info here 
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("W");
                    add("O");
                    add("O");
                    add("D");
                    add("G");
                    add("o");
                    add("E");
                    add("s");
                    add("here");
                    add(":)");
                }
            };
            woodInfo.setInfo(info);
            if (count < 10 && imgSelectorWood < 43) {
                woodInfo.setImageUsed(imgSelectorWood);
                woodInfo.setUrls();
                ImgDisplayedLbl = woodInfo.AddImageUsingURLS();
                imgSelectorWood++;
                //Information.setCount(count = 0);
                woodInfo.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = woodInfo.DisplayInfo();
                infoLbl.setText(infoDisplayed);
            }
        } else if (infoSelected == 5) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };
            
            analogComp.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                analogComp.setImageUsed(imgSelectorAnaComp);
                analogComp.setUrls();
                ImgDisplayedLbl = analogComp.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                analogComp.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogComp.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 6) { 
            // anonymous inner class, to set the info
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

            analogSignals.setInfo(info);
            if(count < 10 && imgSelectorAnaSignals < 65) {
                analogSignals.setImageUsed(imgSelectorAnaSignals);
                analogSignals.setUrls();
                ImgDisplayedLbl = analogSignals.AddImageUsingURLS();
                imgSelectorAnaSignals++;
                //Information.setCount(count = 0);
                analogSignals.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogSignals.DisplayInfo();
                infoLbl.setText(infoDisplayed);

                // break;
            }

        }//end of slector if
         else if (infoSelected == 7) {
            // anonymous inner class, to set the info
            ArrayList<String> info = new ArrayList<String>() {
                {
                   add("A capacitor stores and releases charge");
                    add("Electrons are used in batteries");
                    add("There are many different electronic signals");
                    add("ADC are used to convert analog signals to digital repersentation");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

            analogDiag.setInfo(info);
            
            //not working 
            if (count < 10 && imgSelectorDiagTools  < 74) {
                analogDiag.setImageUsed(imgSelectorDiagTools);
                analogDiag.setUrls();
                ImgDisplayedLbl = analogDiag.AddImageUsingURLS();
                imgSelectorDiagTools++;
                //Information.setCount(count = 0);
                analogDiag.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = analogDiag.DisplayInfo();
                infoLbl.setText(infoDisplayed);

                // break;
            }

        }//end of slector if
         else if (infoSelected == 8) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                   add("<html>A capacitor is a passive two-terminal electrical component<br> used to store energy electrostatically in an electric field.<br>A capacitor works by storing and releasing charge</html>");
                    add("<html>In electronics, a flip-flop or latch is a circuit that has <br>two stable states and can be used to store state information <br>each flip-flop can store up to 1 bit memory.</html>");
                    add("<html>Resistors are used to restrict the flow of current <br>in a given circuit this resistance is measured in Ohms</html>");
                    add("<html>Diode is used direct the flow of current.<br> There are many types of diodes that are more suitable in<br> different situations the most commently known diode would be the<br> LED(Light emmiting Diode) which not only directs the flow of current<br> but in most cases emits a visible light unless the led is<br> infrared then the light my not be seen by the human eye.</html>");
                    add("Resistors are like shiedls");
                    add("Resistors are measured in ohms");
                    add("breadbords are used for creating circuits");
                    add("A.C stands for alternating current ");
                    add("D.C stands for direct current ");
                    add("Diode is used eract the flow of current");
                }
            };

             digitalComp.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                digitalComp.setImageUsed(imgSelectorAnaComp);
                digitalComp.setUrls();
                ImgDisplayedLbl = digitalComp.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                digitalComp.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalComp.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        } else if (infoSelected == 9) {
           // * anonymous inner class, to set the info.
            // * anonymous inner class creates an extra class file, which can slow the programs startup, by the extra memory needed
            // * anonymous inner class extends the class of the object being constructed and has a "This." 
            // * referance to the instance of the object constructed

            // Referance: http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization
            ArrayList<String> info = new ArrayList<String>() {
                {
                    add("<html>A multimeter is an electronic measuring instrument<br> that combines several measurement functions in one unit</html>");
                    add("<html>Basic features of a multimeter would be <br>the abilty to measure voltage(V), current(I) and resistance(R)</html>");
                    add("<html>but that is just the standard for multimeters some multimeters<br> have extra features like checking if there is a connection<br> between to points which can be a very common error when<br> working with large circuits.</html>");
                    add("<html> Some even come with a feature to measure temperature to check<br> if certain components are working above their recomended temperature.</html>");
                    add("<html>A Logic probe is used for testing and troubleshooting <br>Logical states in a circuit (high,low and pulse states)</html>");
                    add("<html>for example lets say you have built up a circuit an for <br>some reason it is not working as expected you can use a <br>logic probe to check where the problem is so you can test <br>logic gate to check each one to see if they are giving<br> the correct output</html>");
                    add("<html>Electrometer is an electrical instrument for measuring <br>electric charge or electrical potential difference</html>");
                    add("<html>There are many different types, ranging from historical handmade<br> mechanical instruments to high-precision electronic devices</html>");
                    add("<html>An LCR meter is a piece of electronic test equipment used to measure<br> the inductance (L), capacitance (C), <br>and resistance (R) of a component </html>");
                    add("<html>Readings will be reasonably accurate if the capacitor or inductor device<br> under test does not have a significant<br> resistive component of impedance</html>");
                }
            };


            digitalDiag.setInfo(info);

            if (count < 10 && imgSelectorAnaComp < 53) {
                //imgSelector = 0;
                digitalDiag.setImageUsed(imgSelectorAnaComp);
                digitalDiag.setUrls();
                ImgDisplayedLbl = digitalDiag.AddImageUsingURLS();
                imgSelectorAnaComp++;
                //Information.setCount(count = 0);
                digitalDiag.setCount(count);
                count++;
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                infoDisplayed = digitalDiag.DisplayInfo();
                infoLbl.setText(infoDisplayed);

            }

        }
            
        System.out.println("index:" + count + "Message:" + infoDisplayed);
    }//GEN-LAST:event_nextBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        
        if (infoSelected == 1) {
            if (count > 0 && imgSelector > 0) {
                count--;
                imgSelector--;
                analogInfo.setCount(count);
                analogInfo.setImageUsed(imgSelector);
                analogInfo.setUrls();
                infoDisplayed = analogInfo.DisplayInfo();
                ImgDisplayedLbl = analogInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
          
        } else if (infoSelected == 2) {
            if (count > 0 && imgSelectorDigital > 9) {
                count--;
                imgSelectorDigital--;
                digitalInfo.setCount(count);
                digitalInfo.setImageUsed(imgSelectorDigital);
                digitalInfo.setUrls();
                infoDisplayed = digitalInfo.DisplayInfo();
                ImgDisplayedLbl = digitalInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        }//end of else if 
        else if (infoSelected == 3) {
            if (count > 0 && imgSelectorPlastic > 20) {
                count--;
                imgSelectorPlastic--;
                plasticInfo.setCount(count);
                plasticInfo.setImageUsed(imgSelectorPlastic);
                plasticInfo.setUrls();
                infoDisplayed = plasticInfo.DisplayInfo();
                ImgDisplayedLbl = plasticInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        } else if (infoSelected == 4) {
            if (count > 0 && imgSelectorWood > 33) {
                count--;
                imgSelectorWood--;
                woodInfo.setCount(count);
                woodInfo.setImageUsed(imgSelectorWood);
                woodInfo.setUrls();
                infoDisplayed = woodInfo.DisplayInfo();
                ImgDisplayedLbl = woodInfo.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
        } else if (infoSelected == 5) {
            if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                analogComp.setCount(count);
                analogComp.setImageUsed(imgSelectorAnaComp);
                analogComp.setUrls();
                infoDisplayed = analogComp.DisplayInfo();
                ImgDisplayedLbl = analogComp.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else if (infoSelected == 6) {
            if (count > 0 && imgSelectorAnaSignals > 54) {
                count--;
                imgSelectorAnaSignals--;
                analogSignals.setCount(count);
                analogSignals.setImageUsed(imgSelectorAnaSignals);
                analogSignals.setUrls();
                infoDisplayed = analogSignals.DisplayInfo();
                ImgDisplayedLbl = analogSignals.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
           }else if (infoSelected == 7) {
            if (count > 0 && imgSelectorDiagTools > 65) {
                count--;
                imgSelectorDiagTools--;
                analogDiag.setCount(count);
                analogDiag.setImageUsed(imgSelectorDiagTools);
                analogDiag.setUrls();
                infoDisplayed = analogDiag.DisplayInfo();
                ImgDisplayedLbl = analogDiag.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
            }
           }else if (infoSelected == 8) {
            if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                digitalComp.setCount(count);
                digitalComp.setImageUsed(imgSelectorAnaComp);
                digitalComp.setUrls();
                infoDisplayed = digitalComp.DisplayInfo();
                ImgDisplayedLbl = digitalComp.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else if (infoSelected == 9) {
           if (count > 0 &&  imgSelectorAnaComp > 42) {
                count--;
                imgSelectorAnaComp--;
                digitalDiag.setCount(count);
                digitalDiag.setImageUsed(imgSelectorAnaComp);
                digitalDiag.setUrls();
                infoDisplayed = digitalDiag.DisplayInfo();
                ImgDisplayedLbl = digitalDiag.AddImageUsingURLS();
                infoLbl.setText(infoDisplayed);
                imageChangeLbl.setIcon(ImgDisplayedLbl);
                }
           }else{
                 System.out.print("An error occourd");
                }
        
         
            
        
        
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel backgroundLbl;
    private javax.swing.JLabel detailsLbl;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel imageChangeLbl;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
}
